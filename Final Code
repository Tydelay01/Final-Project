#include <iostream>
#include <vector>
#include <iomanip>  // for formatting
#include<cstdlib>
#include<ctime>
#using namespace std;


double string_to_double(string s, double& ref) {
	ref = stod(s);

return ref;
}

double get_home_price() {
	string s;
	cout << "Enter home price: " << endl;
	cin >> s;
	double home_price = string_to_double(s, home_price);

return home_price;
}

double get_down_payment_ratio() {
	string s;
	cout << "Enter down payment ratio(percentage): " << endl;
	cin >> s;
	double down_payment_ratio = string_to_double(s, down_payment_ratio);
	
return down_payment_ratio;
}

int get_loan_term() {
	string s;
	cout << "Enter loan term(years): " << endl;
	cin >> s;
	int loan_term = stoi(s);

return loan_term;
}

double get_annual_interest() {
	string s;
	cout << "Enter annual interest(percentage): " << endl;
	cin >> s;
	double annual_interest = string_to_double(s, annual_interest);

return annual_interest;
}

double get_property_tax_rate() {
	string s;
	cout << "Enter property tax rate(percentage): " << endl;
	cin >> s;
	double property_tax_rate = string_to_double(s, property_tax_rate);
	
return property_tax_rate;
}

double get_HOA() {
	string s;
	cout << "Enter annual HOA cost: " << endl;
	cin >> s;
	double HOA = string_to_double(s, HOA);

return HOA;
} 

double get_home_appreciation_rate() {
	string s;
	cout << "Enter home appreciation rate(percentage): " << endl;
	cin >> s;
	double home_appreciation_rate = string_to_double(s, home_appreciation_rate);

return home_appreciation_rate;
}

double get_purchase_tax_rate() {
	string s;
	cout << "Enter purchase tax rate(percentage): " << endl;
	cin >> s;
	double purchase_tax_rate = string_to_double(s, purchase_tax_rate);

return purchase_tax_rate;
}

double get_monthly_mortgage_payment(double p, double i, int n) {
	double math = pow((1+i),n);
	double monthly_mortgage_payment = (p*i*math)/(math-1);

return monthly_mortgage_payment;




// Employment Fuctions, that happen monthly

bool check_employment(bool employment){
  if (employment == true){
    srand(time(0));
    int x = rand()%100;
    if (x >= 10){
      employment = false;
      cout << "You've lost your job. You are no longer making money" << endl;
    }
  }
}

bool restore_emplyment(bool employment){
  if(employment == false){
    srand(time(0));
    int rand_num = rand() % 6;
    if (rand_num < 3){
      employment = true;
      cout << "You've got a new job. You are making money again" <<endl;
    }
  }
}

// ETF Specifics, you have to option to sell, but can also be forced to sell

double sell_etfs(double bank_acount, double etf_value){
  cout<< "Sell ETFs?" <<endl;
  int repeat = 0
  do{
  cout<< "Sell for how much money" <<endl;
  doouble ideal_money_gained;
  cin >> ideal_money_gained;
  if (ideal_money_gained <= etf_holdings);
    bank_acount += ideal_money_gained;
    eft_value -= ideal_money_gained;
    cout << "Youve gained $" << ideal_money gained << endl;
    break;
  else;
    cout << "You dont have enough ETF Holdings to sell that" << endl;
    break;
  cout << "Do you want to sell more ETF" << endl;
  cout <<" 0 for no, 1 for yes" << endl;
  cin >> repeat
  }while (repeat = 1);
}

// If bank acount less than 100.00  


double forced_sell_etf(double bank_acount, double etf_value){
  cout<< "Your bank acount is less than $100, so you are forced to sell some of your etfs" <<endl
  int repeat = 0
  do{
  cout<< "Sell for how much money" <<endl;
  doouble ideal_money_gained;
  cin >> ideal_money_gained;
  if (ideal_money_gained <= etf_value);
    bank_acount += ideal_money_gained;
    eft_value -= ideal_money_gained;
    cout << "Youve gained $" << ideal_money gained << endl;
    break;
  else;
    cout << "You dont have enough ETF Holdings to sell that" << endl;
    break;
  cout << "Do you want to sell more ETF" << endl;
  cout <<" 0 for no, 1 for yes" << endl;
  cin >> repeat
  }while (repeat = 1);
}




// Placeholder namespaces for teammates' modules
namespace HomeModule {
    // Process home ownership costs and updates
    // Parameters: current month index, reference to net cash flow and home value
    void processMonth(int month, double &netCash, double &homeValue) {
        // David will implement mortgage, taxes, HOA, appreciation, sale logic
    }
}

namespace InvestModule {
    // Process renting costs and investment updates
    // Parameters: current month index, reference to net cash flow and ETF value
    void processMonth(int month, double &netCash, double &etfValue) {
        // David will implement rent, investing surplus, returns, liquidity
    }
}

// Structure to hold the financial state for one month
struct FinancialState {
    int month;           // Month index (0 to 359)
    double income;       // Monthly income after taxes
    double expenses;     // Total housing costs (mortgage or rent)
    double netCash;      // Cash remaining after income minus expenses
    double homeValue;    // Value of the home if owned
    double etfValue;     // Value of ETF investments if renting path
    double netWorth;     // Net worth = homeValue + etfValue + netCash
};

// Main simulation function
vector<FinancialState> runSimulation(double monthlyIncome) {
    const int totalMonths = 360;  // 30 years x 12 months
    vector<FinancialState> history;
    history.reserve(totalMonths);

    // Initialize starting values
    check_empolyment(employmnet);
    if (emplyment == False){
      monthly_income = 0;
    }
    restore_emplyment(emplyment);
    if (employment == True){
      monthly_income = monthly_income2;
    double cash = monthlyIncome;  // start with month-0 income
    double homeVal = 0.0;
    double etfVal = 0.0;

    // Loop through each month
    for (int m = 0; m < totalMonths; ++m) {
        FinancialState state;
        state.month = m;

        // Income stays constant here; salary growth module could update monthlyIncome externally
        state.income = monthlyIncome;

        // Reset expenses for this month
        state.expenses = 0.0;

        // Copy current cash to calculate net cash after modules
        double netCash = cash;

        // Call home ownership logic (mortgage, taxes, HOA, appreciation/sale)
        HomeModule::processMonth(m, netCash, homeVal);

        // Call renting/investment logic (rent, invest, returns, liquidity)
        InvestModule::processMonth(m, netCash, etfVal);

        // Update cash on hand
        cash = netCash;

        // Populate state fields
        state.expenses = state.income - netCash;
        state.netCash = netCash;
        state.homeValue = homeVal;
        state.etfValue = etfVal;
        state.netWorth = homeVal + etfVal + netCash;

        // Store this monthâ€™s state
        history.push_back(state);
    }

    return history;
}

int main() {
    
    double home_price = get_home_price();
  	double down_payment_ratio = get_down_payment_ratio();
  	double down_payment = home_price * (down_payment_ratio/100);
	int loan_term = get_loan_term()*12;
	double loan_amount = home_price - down_payment;
	double monthly_interest = get_annual_interest()/1200;
	double property_tax_rate = get_property_tax_rate()/100;
	double HOA = get_HOA();
//	double home_appreciation_rate = get_home_appreciation_rate();
//	double purchase_tax = home_price * (get_purchase_tax_rate()/100);
  	double monthly_mortgage_payment = get_monthly_mortgage_payment(loan_amount, monthly_interest, loan_term);
  	double monthly_payment = monthly_mortgage_payment + ((property_tax_rate*home_price)/12) + HOA/12;
	cout << monthly_payment << endl;
	cout << home_price << endl;
	cout << down_payment << endl;
	cout << loan_amount << endl;
	cout << loan_term << endl;
	cout << ((property_tax_rate*home_price)/12) << endl;// Example usage: assume $5,000 monthly income (adjustable)
    	double monthlyIncome = 5000.0;

    // Run the simulation
    auto data = runSimulation(monthlyIncome);

    // Print a header
    cout << left << setw(6) << "Month"
              << setw(12) << "Income"
              << setw(12) << "Expenses"
              << setw(12) << "Cash"
              << setw(12) << "HomeVal"
              << setw(12) << "ETFVal"
              << setw(12) << "NetWorth"
              << '
';

    // Print the first few months as a sample
    for (int i = 0; i < 12; ++i) {
        const auto &s = data[i];
        if(bank_acount <= 100){
          forced_sell_etf(bank_acount, etf_value)
            if (bank_acount == 0)
              cout << "You ran out of money game over' << endl
              exit;
        }
        sell_etf(bank_acount, etf_value)
        cout << std::setw(6) << s.month
                  << setw(12) << s.income
                  << setw(12) << s.expenses
                  << setw(12) << s.netCash
                  << setw(12) << s.homeValue
                  << setw(12) << s.etfValue
                  << setw(12) << s.netWorth
                  << '
';
    }

    return 0;
}
