/************************************************************
** Authors: Calvin Atkinson, John Hofenbredl, Alexander Delay, and David Harker
** Program: Financial Home and Rent Calculator
** Description: Simulates the long term fincancial trajectory of an individual choosing between two housing options. 
The two stategies associated are purchasing a home with a mortgage and other associated costs, and renting a home while 
investing excess cash into a market-tracking EFT.
** Inputs: Annual pre-tax income, Home Purchase price, downpayment ratio, loan term, mortgage annual interest, propterty
tax rate, annual HOA cost, home appreciation rate, purchase tax rate, property sale tax, starting monthly rate, rent
annual inflation, ETF annual return, simulation duration.
** Outputs: Monthly the program must process gross income, deduct applicable housing costs, update ETF balance using 
compound growth, invest bank balance into ETF, update home value, and record/stor the asset state.
**************************************************************/

#include <iostream>
#include <vector>
#include <iomanip>  // for formatting
#include <cstdlib>
#include <ctime>
#include <cmath>

using namespace std;

int get_value(char character) {
	switch(character) {
		case '0': return 1;
		case '1': return 1;
		case '2': return 1;
		case '3': return 1;
		case '4': return 1;
		case '5': return 1;
		case '6': return 1;
		case '7': return 1;
		case '8': return 1;
		case '9': return 1;
		case '-': return 2;
		case '.': return 3;
		default: return 0;
	}
}

bool is_int(string s) {
	int i = 0;
	int current = get_value(s[i]);
		if (current == 2 || current == 1) {
			i = i + 1;
		} else {
			return 0;
		}

	while (i < s.length()) {
		int current = get_value(s[i]);
		if (current == 1) {
			i = i + 1;
		} else {
			return 0;
		}
	}
return 1;
}

bool is_float1(string s) {
	int i = 0;
	int current = get_value(s[i]);
		if (current == 2 || current == 1 || current == 3) {
			i = i + 1;
		} else {
			return 0;
		}

	while (i < s.length()) {
		int current = get_value(s[i]);
		if (current == 1 || current == 3) {
			i = i + 1;
		} else {
			return 0;
		}
	}
return 1;
}

bool is_float2(string s) {
	if (is_float1(s) == 1) {
		int i = 0;
		int decimal = 0;
		while (i < s.length()) {
			int current = get_value(s[i]);
			if (decimal > 1) {
				return 0;
			} if (current == 3) {
				i = i + 1;
				decimal = decimal + 1;
			} else {
				i = i + 1;
			} 
		}
	} else {
		return 0;
	}
return 1;
} 

/*************************************************************
** Description: Convert a validated numeric string to double.
** Function:    string_to_double
** Preconditions: s represents a valid integer or float literal.
** Postconditions: Sets ref to the parsed value and returns it.
*************************************************************/
double string_to_double(string s, double& ref) {
	ref = stod(s);

return ref;
}

double get_home_price() {
	string s;
	cout << "Enter home price: " << endl;
	cin >> s;
		while (is_float2(s) == 0) {
			cout << "Invalid input! Must be a float" << endl;
			cout << "Enter home price: " << endl;
			cin >> s;
		}
	double home_price = string_to_double(s, home_price);

return home_price;
}

double get_down_payment_ratio() {
	string s;
	cout << "Enter down payment ratio(percentage): " << endl;
	cin >> s;
		while (is_float2(s) == 0) {
			cout << "Invalid input! Must be a float" << endl;
			cout << "Enter down payment ratio(percentage): " << endl;
			cin >> s;
		}
	double down_payment_ratio = string_to_double(s, down_payment_ratio);
	
return down_payment_ratio;
}

int get_loan_term() {
	string s;
	cout << "Enter loan term(years): " << endl;
	cin >> s;
		while (is_int(s) == 0) {
			cout << "Invalid input! Must be an integer" << endl;
			cout << "Enter loan term(years): " << endl;
			cin >> s;
		}
	int loan_term = stoi(s);

return loan_term;
}

double get_annual_interest() {
	string s;
	cout << "Enter annual interest(percentage): " << endl;
	cin >> s;
		while (is_float2(s) == 0) {
			cout << "Invalid input! Must be a float" << endl;
			cout << "Enter annual interest(percentage): " << endl;
			cin >> s;
		}
	double annual_interest = string_to_double(s, annual_interest);

return annual_interest;
}

double get_property_tax_rate() {
	string s;
	cout << "Enter property tax rate(percentage): " << endl;
	cin >> s;
		while (is_float2(s) == 0) {
			cout << "Invalid input! Must be a float" << endl;
			cout << "Enter property tax rate(percentage): " << endl;
			cin >> s;
		}
	double property_tax_rate = string_to_double(s, property_tax_rate);
	
return property_tax_rate;
}

double get_HOA() {
	string s;
	cout << "Enter annual HOA cost: " << endl;
	cin >> s;
		while (is_float2(s) == 0) {
			cout << "Invalid input! Must be a float" << endl;
			cout << "Enter annual HOA cost: " << endl;
			cin >> s;
		}
	double HOA = string_to_double(s, HOA);

return HOA;
} 

double get_home_appreciation_rate() {
	string s;
	cout << "Enter home appreciation rate(percentage): " << endl;
	cin >> s;
	double home_appreciation_rate = string_to_double(s, home_appreciation_rate);

return home_appreciation_rate;
}

double get_purchase_tax_rate() {
	string s;
	cout << "Enter purchase tax rate(percentage): " << endl;
	cin >> s;
		while (is_float2(s) == 0) {
			cout << "Invalid input! Must be a float" << endl;
			cout << "Enter purchase tax rate(percentage): " << endl;
			cin >> s;
		}
	double purchase_tax_rate = string_to_double(s, purchase_tax_rate);

return purchase_tax_rate;
}

double get_monthly_mortgage_payment(double p, double i, int n) {
	double math = pow((1+i),n);
	double monthly_mortgage_payment = (p*i*math)/(math-1);

return monthly_mortgage_payment;
}

/*************************************************************
** Description: Randomly determine if employment is lost (10% chance).
** Function:    check_employment
** Preconditions: employment indicates current job status.
** Postconditions: Returns false if job is lost, else original status.
*************************************************************/

// Employment Fuctions, that happen monthly

bool check_employment(bool employment){
  if (employment == true){
    srand(time(0));
    int x = rand()%100;
    if (x >= 10){
      employment = false;
      cout << "You've lost your job. You are no longer making money" << endl;
    }
  }
    return employment;
}
/*************************************************************
** Description: Attempt weekly to regain employment (50% chance per roll).
** Function:    restore_employment
** Preconditions: employment == false.
** Postconditions: Returns true if re-employed, else false.
*************************************************************/
bool restore_emplyment(bool employment){
  if(employment == false){
    srand(time(0));
    int rand_num = rand() % 6;
    if (rand_num < 3){
      employment = true;
      cout << "You've got a new job. You are making money again" <<endl;
    }
  }
  return employment;
}

// ETF Specifics, you have to option to sell, but can also be forced to sell
/*************************************************************
** Description: Prompt the user to sell a specified amount of ETFs.
** Function:    sell_etfs
** Preconditions: bank_account and etf_value >= 0.
** Postconditions: Deducts etf_value and adds to bank_account if valid.
*************************************************************/
double sell_etfs(double bank_acount, double etf_value){
  cout<< "Sell ETFs?" <<endl;
  int repeat = 0;
  do{
  cout<< "Sell for how much money" <<endl;
  double ideal_money_gained;
  cin >> ideal_money_gained;
  if (ideal_money_gained <= etf_value){
    bank_acount += ideal_money_gained;
    etf_value -= ideal_money_gained;
    cout << "Youve gained $" << ideal_money_gained << endl;
    break;
  }
  else{
    cout << "You dont have enough ETF Holdings to sell that" << endl;
    break;
  }
  cout << "Do you want to sell more ETF" << endl;
  cout <<" 0 for no, 1 for yes" << endl;
  cin >> repeat;
  }while (repeat = 1);
  return bank_acount, etf_value;
}

// If bank acount less than 100.00  

/*************************************************************
** Description: Force ETF sale when cash on hand is below threshold.
** Function:    forced_sell_etf
** Preconditions: bank_account < threshold, etf_value >= 0.
** Postconditions: Deducts etf_value and adds to bank_account.
*************************************************************/
double forced_sell_etf(double bank_acount, double etf_value){
  cout<< "Your bank acount is less than $100, so you are forced to sell some of your etfs" <<endl;
  int repeat = 0;
  do{
  cout<< "Sell for how much money" <<endl;
  double ideal_money_gained;
  cin >> ideal_money_gained;
  if (ideal_money_gained <= etf_value){
    bank_acount += ideal_money_gained;
    etf_value -= ideal_money_gained;
    cout << "Youve gained $" << ideal_money_gained << endl;
    break;
  }
  else{
    cout << "You dont have enough ETF Holdings to sell that" << endl;
    break;
  }
  cout << "Do you want to sell more ETF" << endl;
  cout <<" 0 for no, 1 for yes" << endl;
  cin >> repeat;
  }while (repeat = 1);
  return bank_acount, etf_value;
}




// Placeholder namespaces for teammates' modules
/*************************************************************
** Description: Process one month of home ownership updates.
** Function:    HomeModule::processMonth
** Preconditions: month >= 0; netCash and homeValue passed by reference.
** Postconditions: Updates netCash and homeValue for that month.
*************************************************************/
namespace HomeModule {
    // Process home ownership costs and updates
    // Parameters: current month index, reference to net cash flow and home value
    void processMonth(int month, double &netCash, double &homeValue) {
        // David will implement mortgage, taxes, HOA, appreciation, sale logic
    }
}
/*************************************************************
** Description: Process one month of renting and investment updates.
** Function:    InvestModule::processMonth
** Preconditions: month >= 0; netCash and etfValue passed by reference.
** Postconditions: Updates netCash and etfValue for that month.
*************************************************************/
namespace InvestModule {
    // Process renting costs and investment updates
    // Parameters: current month index, reference to net cash flow and ETF value
    void processMonth(int month, double &netCash, double &etfValue) {
        // David will implement rent, investing surplus, returns, liquidity
    }
}

// Structure to hold the financial state for one month
/*************************************************************
** Description: Data structure to hold monthly financial metrics.
** Function:    struct FinancialState
** Preconditions: Fields should be assigned before use.
** Postconditions: Represents a complete financial snapshot for one month.
*************************************************************/
struct FinancialState {
    int month;           // Month index (0 to 359)
    double income;       // Monthly income after taxes
    double expenses;     // Total housing costs (mortgage or rent)
    double netCash;      // Cash remaining after income minus expenses
    double homeValue;    // Value of the home if owned
    double etfValue;     // Value of ETF investments if renting path
    double netWorth;     // Net worth = homeValue + etfValue + netCash
};

// Main simulation function
/*************************************************************
** Description: Run the 360-month financial simulation.
** Function:    runSimulation
** Preconditions: monthlyIncome >= 0.
** Postconditions: Returns a vector of FinancialState for each month.
*************************************************************/
vector<FinancialState> runSimulation(double monthlyIncome, double monthlyIncome2, bool employment) {
    const int totalMonths = 360;  // 30 years x 12 months
    vector<FinancialState> history;
    history.reserve(totalMonths);

    // Initialize starting values
    check_employment(employment);
    if (employment == false){
      monthlyIncome = 0;
    }
    restore_emplyment(employment);
    if (employment == true){
      monthlyIncome = monthlyIncome2;
    }
    double cash = monthlyIncome;  // start with month-0 income
    double homeVal = 0.0;
    double etfVal = 0.0;

    // Loop through each month
    for (int m = 0; m < totalMonths; ++m) {
        FinancialState state;
        state.month = m;

        // Income stays constant here; salary growth module could update monthlyIncome externally
/*************************************************************
** Description: Data structure to hold monthly financial metrics.
** Function:    struct FinancialState
** Preconditions: Fields should be assigned before use.
** Postconditions: Represents a complete financial snapshot for one month.
*************************************************************/
        state.income = monthlyIncome;

        // Reset expenses for this month
        state.expenses = 0.0;

        // Copy current cash to calculate net cash after modules
        double netCash = cash;

        // Call home ownership logic (mortgage, taxes, HOA, appreciation/sale)
        HomeModule::processMonth(m, netCash, homeVal);

        // Call renting/investment logic (rent, invest, returns, liquidity)
        InvestModule::processMonth(m, netCash, etfVal);

        // Update cash on hand
        cash = netCash;

        // Populate state fields
        state.expenses = state.income - netCash;
        state.netCash = netCash;
        state.homeValue = homeVal;
        state.etfValue = etfVal;
        state.netWorth = homeVal + etfVal + netCash;

        // Store this month’s state
        history.push_back(state);
    }

    return history;
}
/*************************************************************
** Description: Entry point for the program; handles user choice and starts simulation.
** Function:    main
** Preconditions: None.
** Postconditions: Executes simulation and prints formatted results.
*************************************************************/
int main() {
    int decision;
    cout << "Would you like to rent or buy a house? (1 for rent, 2 to buy)" << endl;
    cin >> decision;

    double bank_acount = 1000;
    bool employment = true;
    double etf_value = 1000;
    double monthlyIncome = 5000.0;
    double monthlyIncome2 = monthlyIncome;

    if (decision == 2) {
        double home_price = get_home_price();
        double down_payment_ratio = get_down_payment_ratio();
        double down_payment = home_price * (down_payment_ratio / 100);
        int loan_term = get_loan_term() * 12;
        double loan_amount = home_price - down_payment;
        double monthly_interest = get_annual_interest() / 1200;
        double property_tax_rate = get_property_tax_rate() / 100;
        double HOA = get_HOA();
        double purchase_tax = home_price * (get_purchase_tax_rate() / 100);
        double monthly_mortgage_payment = get_monthly_mortgage_payment(loan_amount, monthly_interest, loan_term);
        double monthly_payment = monthly_mortgage_payment + ((property_tax_rate * home_price) / 12) + HOA / 12;

        cout << "Your monthly mortgage payment is: " << monthly_payment << endl;

    }

    // ❗ Call simulation regardless of rent/buy decision
    auto data = runSimulation(monthlyIncome, monthlyIncome2, employment);

    // Print header
    cout << left << setw(6) << "Month"
         << setw(12) << "Income"
         << setw(12) << "Expenses"
         << setw(12) << "Cash"
         << setw(12) << "HomeVal"
         << setw(12) << "ETFVal"
         << setw(12) << "NetWorth"
         << endl;

    // Print simulation results
    for (int i = 0; i < 12; ++i) {
        const auto &s = data[i];
        if (bank_acount <= 100) {
            forced_sell_etf(bank_acount, etf_value);
            if (bank_acount == 0) {
                cout << "You ran out of money. Game over." << endl;
                return 0;
            }
        }
        sell_etfs(bank_acount, etf_value);
        cout << setw(6) << s.month
             << setw(12) << s.income
             << setw(12) << s.expenses
             << setw(12) << s.netCash
             << setw(12) << s.homeValue
             << setw(12) << s.etfValue
             << setw(12) << s.netWorth
             << endl;
    }

    return 0;
}
